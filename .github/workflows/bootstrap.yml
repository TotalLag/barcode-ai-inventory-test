# .github/workflows/bootstrap.yml
name: Bootstrap Repository

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manually triggering the workflow from the Actions tab

jobs:
  bootstrap:
    permissions:
      contents: write
      pull-requests: write
      
    name: Bootstrap New Project
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set Up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Generate Project Structure and Files
      run: |
        # Create directories
        mkdir -p api/models api/controllers api/routes api/migrations api/seeds client/components client/pages .github/scripts

        # Create basic package.json
        echo '{
          "name": "inventory-app",
          "version": "1.0.0",
          "main": "index.js",
          "license": "MIT",
          "scripts": {
            "test": "jest",
            "start": "node api/server.js"
          },
          "dependencies": {
            "express": "^4.17.1",
            "knex": "^0.95.14",
            "sqlite3": "^5.0.2",
            "objection": "^2.2.15",
            "dotenv": "^10.0.0"
          },
          "devDependencies": {
            "jest": "^27.4.5",
            "eslint": "^7.32.0"
          }
        }' > package.json

        # Create the server.js file
        echo 'const express = require("express");
        require("dotenv").config();
        const knex = require("knex");
        const { Model } = require("objection");
        const knexConfig = require("./knexfile.js");
        const itemRoutes = require("./routes/itemRoutes");

        const app = express();
        const db = knex(knexConfig[process.env.NODE_ENV || "development"]);
        Model.knex(db);

        app.use(express.json());
        app.use("/api/items", itemRoutes);

        const port = process.env.PORT || 3000;
        app.listen(port, () => {
          console.log(`Server running on port ${port}`);
        });' > api/server.js

        # Create the knexfile.js for database configuration
        echo 'module.exports = {
          development: {
            client: "sqlite3",
            connection: {
              filename: "./dev.sqlite3"
            },
            useNullAsDefault: true,
            migrations: {
              directory: "./api/migrations"
            },
            seeds: {
              directory: "./api/seeds"
            }
          }
        };' > api/knexfile.js

        # Create the item model
        echo 'const { Model } = require("objection");

        class Item extends Model {
          static get tableName() {
            return "items";
          }

          static get jsonSchema() {
            return {
              type: "object",
              required: ["name", "category"],
              properties: {
                id: { type: "integer" },
                name: { type: "string", minLength: 1, maxLength: 255 },
                category: { type: "string", minLength: 1, maxLength: 255 },
                box: { type: "string", minLength: 1, maxLength: 255 },
                status: { type: "string", enum: ["checked-in", "checked-out"], default: "checked-in" }
              }
            };
          }
        }

        module.exports = Item;' > api/models/itemModel.js

        # Create itemRoutes.js for the API
        echo 'const express = require("express");
        const Item = require("../models/itemModel");

        const router = express.Router();

        router.get("/", async (req, res) => {
          try {
            const items = await Item.query();
            res.json(items);
          } catch (err) {
            res.status(500).json({ error: err.message });
          }
        });

        module.exports = router;' > api/routes/itemRoutes.js

        # Create the initial docs generation script
        echo 'const fs = require("fs");
        const { Configuration, OpenAIApi } = require("openai");

        const configuration = new Configuration({
          apiKey: process.env.OPENAI_API_KEY,
        });
        const openai = new OpenAIApi(configuration);

        async function generateInitialDocs() {
          const prompt = `
            You are setting up a new project repository for an inventory management system. Please generate a comprehensive README.md file that includes the project description, setup instructions, usage examples, and contribution guidelines.
          `;

          const response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: prompt,
            max_tokens: 1500,
          });

          const readmeContent = response.data.choices[0].text.trim();

          fs.writeFileSync("README.md", readmeContent);
          console.log("Generated README.md");
        }

        generateInitialDocs();' > .github/scripts/generate_initial_docs.js

        # Create the holistic analysis script
        echo 'const fs = require("fs");
        const path = require("path");
        const { Configuration, OpenAIApi } = require("openai");

        const configuration = new Configuration({
          apiKey: process.env.OPENAI_API_KEY,
        });
        const openai = new OpenAIApi(configuration);

        async function analyzeCodebase(directory) {
          let codebase = "";

          function readDirectory(dir) {
            const files = fs.readdirSync(dir);

            files.forEach((file) => {
              const fullPath = path.join(dir, file);
              const stat = fs.statSync(fullPath);

              if (stat.isDirectory()) {
                readDirectory(fullPath);
              } else if (stat.isFile() && [".js", ".ts", ".tsx"].includes(path.extname(file))) {
                const fileContent = fs.readFileSync(fullPath, "utf8");
                codebase += `\n\nFile: ${fullPath}\n\n${fileContent}\n\n`;
              }
            });
          }

          readDirectory(directory);

          const prompt = `
            You are a senior developer tasked with ensuring the consistency and improvement of the following codebase. Consider that the user might have made changes, such as adding a new attribute to a model. Your job is to identify all parts of the codebase that should be updated accordingly, suggest improvements, and ensure the project is on track to become a fully functional application.\n\n
            Codebase:\n${codebase}\n\n
            Please provide a detailed plan of action, including code changes, refactoring opportunities, and any other necessary improvements.
          `;

          const response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: prompt,
            max_tokens: 2000,
          });

          const suggestions = response.data.choices[0].text.trim();

          fs.writeFileSync("holistic_suggestions.md", suggestions);
          console.log("Holistic Suggestions:", suggestions);
        }

        analyzeCodebase("./");' > .github/scripts/chatgpt_analyze_codebase.js

        # Create GitHub Actions workflow files
        mkdir -p .github/workflows

        # Initial Setup Workflow
        echo 'name: Initial Setup
        on:
          push:
            branches:
              - main
          workflow_dispatch: # Allows manually triggering the workflow from the Actions tab

        jobs:
          setup:
            permissions:
              contents: write
            name: Setup New Project
            runs-on: ubuntu-latest

            steps:
            - name: Checkout Code
              uses: actions/checkout@v2

            - name: Set Up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: "16"

            - name: Install Dependencies
              run: npm install

            - name: Initial Configuration
              run: |
                npx knex migrate:latest  # Run database migrations
                npm run build  # Build frontend if applicable

            - name: Generate Initial Documentation
              run: node .github/scripts/generate_initial_docs.js

            - name: Auto Commit Changes
              if: github.ref == "refs/heads/main"
              uses: stefanzweifel/git-auto-commit-action@v5
              with:
                commit_message: "Initial setup completed"
                branch: bootstrap-setup' > .github/workflows/initial-setup.yml

        # Holistic Analysis Workflow
        echo 'name: Holistic Codebase Analysis and Improvement
        on:
          push:
            branches:
              - main
          pull_request:
            branches:
              - main
          schedule:
            - cron: "0 0 * * *" # Runs daily at midnight

        jobs:
          analyze_codebase:
            permissions:
              contents: write
            name: Analyze Codebase Holistically
            runs-on: ubuntu-latest

            steps:
            - name: Checkout Code
              uses: actions/checkout@v2

            - name: Set Up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: "16"

            - name: Install Dependencies
              run: npm install

            - name: Analyze Code and Generate Holistic Suggestions
              env:
                OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
              run: node .github/scripts/chatgpt_analyze_codebase.js

            - name: Auto Commit Suggestions
              if: github.ref == "refs/heads/main"
              uses: stefanzweifel/git-auto-commit-action@v5
              with:
                commit_message: "AI-generated holistic code suggestions"
                branch: bootstrap-setup' > .github/workflows/holistic-analysis.yml

        # Testing Workflow
        echo 'name: Run Tests
        on:
          push:
            branches:
              - main
          pull_request:
            branches:
              - main

        jobs:
          test:
            name: Run Tests
            runs-on: ubuntu-latest

            steps:
            - name: Checkout Code
              uses: actions/checkout@v2

            - name: Set Up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: "16"

            - name: Install Dependencies
              run: npm install

            - name: Run Tests
              run: npm test' > .github/workflows/test.yml

        # Security Audit Workflow
        echo 'name: Security Audit
        on:
          push:
            branches:
              - main
          pull_request:
            branches:
              - main

        jobs:
          security:
            name: Run Security Audit
            runs-on: ubuntu-latest

            steps:
            - name: Checkout Code
              uses: actions/checkout@v2

            - name: Set Up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: "16"

            - name: Install Dependencies
              run: npm install

            - name: Run npm audit
              run: npm audit' > .github/workflows/security.yml

    - name: Commit and Push Changes to Temporary Branch
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions"
        git checkout -b bootstrap-setup
        git add .
        git commit -m "Bootstrap initial setup"
        git push origin bootstrap-setup

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: bootstrap-setup
        title: "Bootstrap initial setup"
        body: "This PR contains the initial setup of the project."
        base: main
